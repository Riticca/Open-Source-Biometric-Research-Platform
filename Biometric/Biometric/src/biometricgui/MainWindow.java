/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biometricgui;

import java.awt.*;
import java.awt.Color;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFileChooser;

public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form BiometricUI
     */
    public MainWindow() {

        /* Hash map contains panels and filepaths */
        fileToOpen = new HashMap<>();

        /* Count for videos to be load */
        videoPlotterCount = 0;

        /* Count for graphs to be load */
        graphCount = 0;

        /* Initialization for video plotters (maximum 2) */
        videoPlotters = new VideoPlotter[2];

        /* Initialization for graph plotters (maximum 4) */
        graphThreads = new Thread[4];

        /* Data to be synchronized between threads */
        sharedData = SharedData.getSharedDataInstance();

        /* Initialization of window components */
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        buttonGroup2 = new javax.swing.ButtonGroup();
        slider = new javax.swing.JSlider();
        jPanelMessages = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaDisplayMessages = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jPanelEyeTracking = new javax.swing.JPanel();
        jLabelEyeTracking = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jRadioButtonLive = new javax.swing.JRadioButton();
        jRadioButtonBrowseComputer = new javax.swing.JRadioButton();
        jButtonEyeTracking = new javax.swing.JButton();
        jButtonUserVideo = new javax.swing.JButton();
        jButtonEEG = new javax.swing.JButton();
        jButtonECG = new javax.swing.JButton();
        jButtonEMG = new javax.swing.JButton();
        jButtonGSR = new javax.swing.JButton();
        jButtonEyeTrackingData = new javax.swing.JButton();
        jPanelUserVideo = new javax.swing.JPanel();
        jLabelUserVideo = new javax.swing.JLabel();
        jPanelECG = new javax.swing.JPanel();
        jPanelGSR = new javax.swing.JPanel();
        jPanelEEG = new javax.swing.JPanel();
        jPanelEMG = new javax.swing.JPanel();
        jToggleButtonStop = new javax.swing.JToggleButton();
        jToggleButtonStart = new javax.swing.JToggleButton();
        EEG_S1 = new javax.swing.JCheckBox();
        EEG_S2 = new javax.swing.JCheckBox();
        EEG_S3 = new javax.swing.JCheckBox();
        EEG_S4 = new javax.swing.JCheckBox();
        ECG_S1 = new javax.swing.JCheckBox();
        ECG_S2 = new javax.swing.JCheckBox();
        ECG_S3 = new javax.swing.JCheckBox();
        ECG_S4 = new javax.swing.JCheckBox();
        GSR_S1 = new javax.swing.JCheckBox();
        GSR_S2 = new javax.swing.JCheckBox();
        GSR_S3 = new javax.swing.JCheckBox();
        GSR_S4 = new javax.swing.JCheckBox();
        EMG_S1 = new javax.swing.JCheckBox();
        EMG_S2 = new javax.swing.JCheckBox();
        EMG_S3 = new javax.swing.JCheckBox();
        EMG_S4 = new javax.swing.JCheckBox();
        jToggleButtonExit = new javax.swing.JToggleButton();

        jFileChooser1.setDialogTitle("This is my open dialog");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Opensource Biometric Research Platform");
        setBackground(new java.awt.Color(255, 204, 204));
        setBounds(new java.awt.Rectangle(0, 0, 500, 500));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(700, 700));
        setPreferredSize(new java.awt.Dimension(1390, 900));
        setResizable(false);

        slider.setMajorTickSpacing(10);
        slider.setMinorTickSpacing(1);
        slider.setPaintLabels(true);
        slider.setPaintTicks(true);
        slider.setSnapToTicks(true);
        slider.setToolTipText("");
        slider.setValue(0);
        slider.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        slider.setPreferredSize(new java.awt.Dimension(200, 40));
        slider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                sliderMouseDragged(evt);
            }
        });
        slider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sliderMouseClicked(evt);
            }
        });

        jPanelMessages.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextAreaDisplayMessages.setColumns(20);
        jTextAreaDisplayMessages.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jTextAreaDisplayMessages.setLineWrap(true);
        jTextAreaDisplayMessages.setRows(5);
        jTextAreaDisplayMessages.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextAreaDisplayMessages);

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Messages");

        javax.swing.GroupLayout jPanelMessagesLayout = new javax.swing.GroupLayout(jPanelMessages);
        jPanelMessages.setLayout(jPanelMessagesLayout);
        jPanelMessagesLayout.setHorizontalGroup(
            jPanelMessagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMessagesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMessagesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelMessagesLayout.setVerticalGroup(
            jPanelMessagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMessagesLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                .addGap(48, 48, 48))
        );

        jPanelEyeTracking.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelEyeTracking.setName("jPanelEyeTracking"); // NOI18N
        jPanelEyeTracking.setPreferredSize(new java.awt.Dimension(65, 14));

        jLabelEyeTracking.setText("Eye Tracking");
        jLabelEyeTracking.setAlignmentX(0.5F);
        jLabelEyeTracking.setMaximumSize(new java.awt.Dimension(3267, 3267));
        jLabelEyeTracking.setMinimumSize(new java.awt.Dimension(0, 0));

        javax.swing.GroupLayout jPanelEyeTrackingLayout = new javax.swing.GroupLayout(jPanelEyeTracking);
        jPanelEyeTracking.setLayout(jPanelEyeTrackingLayout);
        jPanelEyeTrackingLayout.setHorizontalGroup(
            jPanelEyeTrackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEyeTrackingLayout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(jLabelEyeTracking, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(289, Short.MAX_VALUE))
        );
        jPanelEyeTrackingLayout.setVerticalGroup(
            jPanelEyeTrackingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEyeTrackingLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jLabelEyeTracking, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addGap(77, 77, 77))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        buttonGroup2.add(jRadioButtonLive);
        jRadioButtonLive.setText("Live");
        jRadioButtonLive.setActionCommand("Load Live");
        jRadioButtonLive.setEnabled(false);
        jRadioButtonLive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonLiveActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButtonBrowseComputer);
        jRadioButtonBrowseComputer.setText("Browse Computer");
        jRadioButtonBrowseComputer.setToolTipText("Click to brose file from your system");
        jRadioButtonBrowseComputer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonBrowseComputerActionPerformed(evt);
            }
        });

        jButtonEyeTracking.setText("Eye Tracking");
        jButtonEyeTracking.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonEyeTrackingMouseClicked(evt);
            }
        });

        jButtonUserVideo.setText("User Video");
        jButtonUserVideo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonUserVideoMouseClicked(evt);
            }
        });

        jButtonEEG.setText("EEG");
        jButtonEEG.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonEEGMouseClicked(evt);
            }
        });
        jButtonEEG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEEGActionPerformed(evt);
            }
        });

        jButtonECG.setText("ECG");
        jButtonECG.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonECGMouseClicked(evt);
            }
        });

        jButtonEMG.setText("EMG");
        jButtonEMG.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonEMGMouseClicked(evt);
            }
        });

        jButtonGSR.setText("GSR");
        jButtonGSR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonGSRMouseClicked(evt);
            }
        });

        jButtonEyeTrackingData.setLabel(" Eye Tracking Data");
        jButtonEyeTrackingData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonEyeTrackingDataMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jRadioButtonBrowseComputer, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jRadioButtonLive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jButtonEMG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonGSR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, jPanel8Layout.createSequentialGroup()
                                .addComponent(jButtonEEG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonECG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, jPanel8Layout.createSequentialGroup()
                                .addComponent(jButtonEyeTracking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonUserVideo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jButtonEyeTrackingData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(125, 125, 125))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButtonBrowseComputer, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonLive, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonEyeTrackingData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(14, 14, 14)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEyeTracking, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonUserVideo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEEG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonECG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEMG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonGSR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanelUserVideo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelUserVideo.setName("jPanelUserVideo"); // NOI18N
        jPanelUserVideo.setPreferredSize(new java.awt.Dimension(61, 14));

        jLabelUserVideo.setText("User Video");

        javax.swing.GroupLayout jPanelUserVideoLayout = new javax.swing.GroupLayout(jPanelUserVideo);
        jPanelUserVideo.setLayout(jPanelUserVideoLayout);
        jPanelUserVideoLayout.setHorizontalGroup(
            jPanelUserVideoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUserVideoLayout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(jLabelUserVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(183, Short.MAX_VALUE))
        );
        jPanelUserVideoLayout.setVerticalGroup(
            jPanelUserVideoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUserVideoLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jLabelUserVideo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(77, 77, 77))
        );

        jPanelECG.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelECG.setName("ECG Graph"); // NOI18N
        jPanelECG.setPreferredSize(new java.awt.Dimension(452, 187));

        javax.swing.GroupLayout jPanelECGLayout = new javax.swing.GroupLayout(jPanelECG);
        jPanelECG.setLayout(jPanelECGLayout);
        jPanelECGLayout.setHorizontalGroup(
            jPanelECGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );
        jPanelECGLayout.setVerticalGroup(
            jPanelECGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 185, Short.MAX_VALUE)
        );

        jPanelGSR.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelGSR.setName("GSR Graph"); // NOI18N
        jPanelGSR.setPreferredSize(new java.awt.Dimension(452, 187));

        javax.swing.GroupLayout jPanelGSRLayout = new javax.swing.GroupLayout(jPanelGSR);
        jPanelGSR.setLayout(jPanelGSRLayout);
        jPanelGSRLayout.setHorizontalGroup(
            jPanelGSRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );
        jPanelGSRLayout.setVerticalGroup(
            jPanelGSRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 173, Short.MAX_VALUE)
        );

        jPanelEEG.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelEEG.setAlignmentX(0.0F);
        jPanelEEG.setAlignmentY(0.0F);
        jPanelEEG.setName("EEG Graph"); // NOI18N
        jPanelEEG.setPreferredSize(new java.awt.Dimension(452, 187));

        javax.swing.GroupLayout jPanelEEGLayout = new javax.swing.GroupLayout(jPanelEEG);
        jPanelEEG.setLayout(jPanelEEGLayout);
        jPanelEEGLayout.setHorizontalGroup(
            jPanelEEGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 471, Short.MAX_VALUE)
        );
        jPanelEEGLayout.setVerticalGroup(
            jPanelEEGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 185, Short.MAX_VALUE)
        );

        jPanelEMG.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelEMG.setName("EMG Graph"); // NOI18N
        jPanelEMG.setPreferredSize(new java.awt.Dimension(452, 187));

        javax.swing.GroupLayout jPanelEMGLayout = new javax.swing.GroupLayout(jPanelEMG);
        jPanelEMG.setLayout(jPanelEMGLayout);
        jPanelEMGLayout.setHorizontalGroup(
            jPanelEMGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelEMGLayout.setVerticalGroup(
            jPanelEMGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 173, Short.MAX_VALUE)
        );

        jToggleButtonStop.setBackground(new java.awt.Color(204, 0, 0));
        jToggleButtonStop.setText("Stop");
        jToggleButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonStopActionPerformed(evt);
            }
        });

        jToggleButtonStart.setBackground(new java.awt.Color(0, 255, 0));
        jToggleButtonStart.setText("Start");
        jToggleButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonStartActionPerformed(evt);
            }
        });

        EEG_S1.setText("S1");
        EEG_S1.setActionCommand("EEGS1");
        EEG_S1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EEG_S1ActionPerformed(evt);
            }
        });

        EEG_S2.setText("S2");
        EEG_S2.setToolTipText("");
        EEG_S2.setActionCommand("EEGS2");
        EEG_S2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EEG_S2ActionPerformed(evt);
            }
        });

        EEG_S3.setText("S3");
        EEG_S3.setToolTipText("");
        EEG_S3.setActionCommand("EEGS3");
        EEG_S3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EEG_S3ActionPerformed(evt);
            }
        });

        EEG_S4.setText("S4");
        EEG_S4.setToolTipText("");
        EEG_S4.setActionCommand("EEGS4");
        EEG_S4.setVerifyInputWhenFocusTarget(false);
        EEG_S4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EEG_S4ActionPerformed(evt);
            }
        });

        ECG_S1.setText("S1");
        ECG_S1.setActionCommand("ECGS1");
        ECG_S1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ECG_S1ActionPerformed(evt);
            }
        });

        ECG_S2.setText("S2");
        ECG_S2.setToolTipText("");
        ECG_S2.setActionCommand("EEGS2");
        ECG_S2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ECG_S2ActionPerformed(evt);
            }
        });

        ECG_S3.setText("S3");
        ECG_S3.setToolTipText("");
        ECG_S3.setActionCommand("EEGS3");
        ECG_S3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ECG_S3ActionPerformed(evt);
            }
        });

        ECG_S4.setText("S4");
        ECG_S4.setToolTipText("");
        ECG_S4.setActionCommand("EEGS4");
        ECG_S4.setVerifyInputWhenFocusTarget(false);
        ECG_S4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ECG_S4ActionPerformed(evt);
            }
        });

        GSR_S1.setText("S1");
        GSR_S1.setActionCommand("EEGS1");
        GSR_S1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GSR_S1ActionPerformed(evt);
            }
        });

        GSR_S2.setText("S2");
        GSR_S2.setToolTipText("");
        GSR_S2.setActionCommand("EEGS2");
        GSR_S2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GSR_S2ActionPerformed(evt);
            }
        });

        GSR_S3.setText("S3");
        GSR_S3.setToolTipText("");
        GSR_S3.setActionCommand("EEGS3");
        GSR_S3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GSR_S3ActionPerformed(evt);
            }
        });

        GSR_S4.setText("S4");
        GSR_S4.setToolTipText("");
        GSR_S4.setActionCommand("EEGS4");
        GSR_S4.setVerifyInputWhenFocusTarget(false);
        GSR_S4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GSR_S4ActionPerformed(evt);
            }
        });

        EMG_S1.setText("S1");
        EMG_S1.setActionCommand("EEGS1");
        EMG_S1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EMG_S1ActionPerformed(evt);
            }
        });

        EMG_S2.setText("S2");
        EMG_S2.setToolTipText("");
        EMG_S2.setActionCommand("EEGS2");
        EMG_S2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EMG_S2ActionPerformed(evt);
            }
        });

        EMG_S3.setText("S3");
        EMG_S3.setToolTipText("");
        EMG_S3.setActionCommand("EEGS3");
        EMG_S3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EMG_S3ActionPerformed(evt);
            }
        });

        EMG_S4.setText("S4");
        EMG_S4.setToolTipText("");
        EMG_S4.setActionCommand("EEGS4");
        EMG_S4.setVerifyInputWhenFocusTarget(false);
        EMG_S4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EMG_S4ActionPerformed(evt);
            }
        });

        jToggleButtonExit.setBackground(new java.awt.Color(204, 204, 204));
        jToggleButtonExit.setText("Exit");
        jToggleButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(EMG_S1)
                                    .addComponent(EMG_S2)
                                    .addComponent(EMG_S3)
                                    .addComponent(EMG_S4)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(EEG_S3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(EEG_S2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(EEG_S1)
                                    .addComponent(EEG_S4))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanelEyeTracking, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                                .addComponent(jPanelUserVideo, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanelEEG, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                                    .addComponent(jPanelEMG, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(7, 7, 7)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ECG_S1)
                                            .addComponent(ECG_S2)
                                            .addComponent(ECG_S3)
                                            .addComponent(ECG_S4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jPanelECG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(GSR_S1)
                                            .addComponent(GSR_S2)
                                            .addComponent(GSR_S3)
                                            .addComponent(GSR_S4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jPanelGSR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jToggleButtonStart)
                        .addGap(18, 18, 18)
                        .addComponent(jToggleButtonStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jToggleButtonExit))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jPanelMessages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanelEyeTracking, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                            .addComponent(jPanelUserVideo, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanelECG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanelEEG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(43, 43, 43))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(ECG_S1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ECG_S2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ECG_S3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ECG_S4)
                                        .addGap(110, 110, 110))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(EEG_S1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(EEG_S2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(EEG_S3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(EEG_S4)
                                        .addGap(109, 109, 109)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelEMG, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanelGSR, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(GSR_S1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(GSR_S2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(GSR_S3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(GSR_S4))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(EMG_S1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(EMG_S2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(EMG_S3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(EMG_S4)))
                        .addGap(18, 18, 18)
                        .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jToggleButtonStart)
                            .addComponent(jToggleButtonStop)
                            .addComponent(jToggleButtonExit))
                        .addGap(39, 39, 39)
                        .addComponent(jPanelMessages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(174, Short.MAX_VALUE))
        );

        EEG_S1.getAccessibleContext().setAccessibleName("EEGS1");
        EEG_S2.getAccessibleContext().setAccessibleName("EEGS2");
        EEG_S3.getAccessibleContext().setAccessibleName("EEGS3");
        EEG_S4.getAccessibleContext().setAccessibleName("EEGS4");
        ECG_S1.getAccessibleContext().setAccessibleName("ECGS1");
        ECG_S2.getAccessibleContext().setAccessibleName("ECGS2");
        ECG_S3.getAccessibleContext().setAccessibleName("ECGS3");
        ECG_S4.getAccessibleContext().setAccessibleName("ECGS4");
        GSR_S1.getAccessibleContext().setAccessibleName("GSRS1");
        GSR_S2.getAccessibleContext().setAccessibleName("GSRS2");
        GSR_S3.getAccessibleContext().setAccessibleName("GSRS3");
        GSR_S4.getAccessibleContext().setAccessibleName("GSRS4");
        EMG_S1.getAccessibleContext().setAccessibleName("EMGS1");
        EMG_S2.getAccessibleContext().setAccessibleName("EMGS2");
        EMG_S3.getAccessibleContext().setAccessibleName("EMGS3");
        EMG_S4.getAccessibleContext().setAccessibleName("EMGS4");

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButtonLiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonLiveActionPerformed
        browseComputer = false;
    }//GEN-LAST:event_jRadioButtonLiveActionPerformed

    private void jRadioButtonBrowseComputerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonBrowseComputerActionPerformed
        browseComputer = true;
    }//GEN-LAST:event_jRadioButtonBrowseComputerActionPerformed

    private void chooseFile(javax.swing.JPanel panelName) {

        /* Get input file from user */
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(null);
        //System.out.println("The choose File selected\n");
        try {
            File fileRef = fileChooser.getSelectedFile();
            if (fileRef != null) {
                fileToOpen.put(panelName, fileRef.getAbsolutePath());
                if ((panelName.getName()).contains("EEG")) {
                    EEGSetOn = true;
                }
                if ((panelName.getName()).contains("ECG")) {
                    ECGSetOn = true;
                }
                if ((panelName.getName()).contains("EMG")) {
                    EMGSetOn = true;
                }
                if ((panelName.getName()).contains("GSR")) {
                    GSRSetOn = true;
                }

                System.out.println("My panel name is " + panelName.getName());
            }
        } catch (NullPointerException e) {
            System.out.println("Null pointer exception");
        }
    }

    private void jButtonEyeTrackingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEyeTrackingMouseClicked
        if (browseComputer == true) {
            chooseFile(jPanelEyeTracking);
        }
    }//GEN-LAST:event_jButtonEyeTrackingMouseClicked

    private void jButtonUserVideoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonUserVideoMouseClicked
        if (browseComputer == true) {
            chooseFile(jPanelUserVideo);
        }
    }//GEN-LAST:event_jButtonUserVideoMouseClicked

    private void jToggleButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonStopActionPerformed

        if (jToggleButtonStop.getText().equals("Stop") && jToggleButtonStop.isEnabled()) {

            /* Stop all graph threads
            for (Thread graphThread : graphThreads) {
                graphThread.stop();
            }
             */
 /* Stop all videos */
            for (int i = 0; i < videoPlotterCount; i++) {
                videoPlotters[i].stopVideo();
            }

            /* Change the color of button */
            jToggleButtonStart.setText("Start");
            jToggleButtonStart.setBackground(Color.GREEN);

        }
    }//GEN-LAST:event_jToggleButtonStopActionPerformed

    private void jToggleButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonStartActionPerformed

        switch (jToggleButtonStart.getText()) {
            case "Start":
                /* Process all entries from map */
                for (Map.Entry<javax.swing.JPanel, String> entry : fileToOpen.entrySet()) {

                    javax.swing.JPanel panelSelected = entry.getKey();
                    String localFilePath = entry.getValue();

                    /* Processing for videos */
                    if ((panelSelected.getName().equals("jPanelEyeTracking"))
                            || (panelSelected.getName().equals("jPanelUserVideo"))) {

                        /* Hide the label on video */
                        javax.swing.JLabel lab = (javax.swing.JLabel) panelSelected.getComponent(0);
                        lab.setVisible(false);

                        /* Create and start threads for video */
                        videoPlotters[videoPlotterCount] = new VideoPlotter(panelSelected, localFilePath, this);
                        Thread thread = new Thread(videoPlotters[videoPlotterCount]);
                        thread.start();
                        videoPlotterCount++;
                    } else {

                        Map<Integer, Boolean> whichSignalCalled = new HashMap<>();
                        Map<Integer, Boolean> EEGSignals = new HashMap<>();
                        Map<Integer, Boolean> ECGSignals = new HashMap<>();
                        Map<Integer, Boolean> EMGSignals = new HashMap<>();
                        Map<Integer, Boolean> GSRSignals = new HashMap<>();
                        /* Processing for graphs */
                        if (panelSelected.getName().contains("EEG")) {
                            EEGSignals.put(1, EEG_S1_On);
                            EEGSignals.put(2, EEG_S2_On);
                            EEGSignals.put(3, EEG_S3_On);
                            EEGSignals.put(4, EEG_S4_On);
                            whichSignalCalled.putAll(EEGSignals);
                        } else if (panelSelected.getName().contains("ECG")) {
                            ECGSignals.put(1, ECG_S1_On);
                            ECGSignals.put(2, ECG_S2_On);
                            ECGSignals.put(3, ECG_S3_On);
                            ECGSignals.put(4, ECG_S4_On);

                            whichSignalCalled.putAll(ECGSignals);
                        } else if (panelSelected.getName().contains("EMG")) {
                            EMGSignals.put(1, EMG_S1_On);
                            EMGSignals.put(2, EMG_S2_On);
                            EMGSignals.put(3, EMG_S3_On);
                            EMGSignals.put(4, EMG_S4_On);

                            whichSignalCalled.putAll(EMGSignals);
                        } else if (panelSelected.getName().contains("GSR")) {
                            GSRSignals.put(1, GSR_S1_On);
                            GSRSignals.put(2, GSR_S2_On);
                            GSRSignals.put(3, GSR_S3_On);
                            GSRSignals.put(4, GSR_S4_On);

                            whichSignalCalled.putAll(GSRSignals);
                        }
                        GraphPlotter newGraph = new GraphPlotter(panelSelected, localFilePath, whichSignalCalled);
                        graphThreads[graphCount] = new Thread(newGraph);
                        graphThreads[graphCount].start();
                        graphCount++;
                    }
                }
                /* Create thread for slider and set its status to true */
                sharedData.setSliderStatus(true);
                Slider firstThread = new Slider(slider);
                Thread thread = new Thread(firstThread);
                thread.start();
                /* Change Start button label to Pause */
                jToggleButtonStop.setEnabled(true);
                jToggleButtonStart.setText("Pause");
                jToggleButtonStart.setBackground(Color.YELLOW);
                break;
            case "Pause":
                /* Pause all running videos */
                for (int i = 0; i < videoPlotterCount; i++) {
                    videoPlotters[i].pauseVideo();
                }
                /* Disable slider */
                sharedData.setSliderStatus(false);
                /* Change Pause button label to Resume */
                jToggleButtonStart.setText("Resume");
                jToggleButtonStart.setBackground(Color.GREEN);
                break;
            case "Resume":
                /* Resume all videos */
                for (int i = 0; i < videoPlotterCount; i++) {
                    videoPlotters[i].resumeVideo();
                }
                /* Change Resume button label to Pause */
                jToggleButtonStart.setText("Pause");
                jToggleButtonStart.setBackground(Color.YELLOW);
                /* Enable slider */
                sharedData.setSliderStatus(true);
                break;
            default:
                break;
        }

    }//GEN-LAST:event_jToggleButtonStartActionPerformed

    private void jButtonEyeTrackingDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEyeTrackingDataMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonEyeTrackingDataMouseClicked

    private void sliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderMouseDragged

        /* Change the current time of video according to slider */
        sharedData.set(slider.getValue());
        for (int i = 0; i < videoPlotterCount; i++) {
            videoPlotters[i].setMediaValue(slider.getValue());
        }
    }//GEN-LAST:event_sliderMouseDragged

    private void jButtonECGMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonECGMouseClicked

        /* Get ECG file from user */
        if (browseComputer == true) {
            chooseFile(jPanelECG);
        }
    }//GEN-LAST:event_jButtonECGMouseClicked

    private void jButtonEEGMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEEGMouseClicked

        /* Get EEG file from user */
        if (browseComputer == true) {
            chooseFile(jPanelEEG);
        }
    }//GEN-LAST:event_jButtonEEGMouseClicked

    private void jButtonGSRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonGSRMouseClicked

        /* Get GSR file from user */
        if (browseComputer == true) {
            chooseFile(jPanelGSR);
        }
    }//GEN-LAST:event_jButtonGSRMouseClicked

    private void jButtonEMGMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonEMGMouseClicked

        /* Get EMG file from user */
        if (browseComputer == true) {
            chooseFile(jPanelEMG);
        }
    }//GEN-LAST:event_jButtonEMGMouseClicked

    private void sliderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderMouseClicked

        /* Change the current time of video according to slider */
        sharedData.set(slider.getValue());
        for (int i = 0; i < videoPlotterCount; i++) {
            videoPlotters[i].setMediaValue(slider.getValue());
        }
    }//GEN-LAST:event_sliderMouseClicked

    private void EEG_S1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EEG_S1ActionPerformed
        if (EEGSetOn) {
            if (EEG_S1.isSelected()) {

                EEG_S1_On = true;
            }
        }

    }//GEN-LAST:event_EEG_S1ActionPerformed

    private void EEG_S2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EEG_S2ActionPerformed
        if (EEGSetOn) {
            if (EEG_S2.isSelected()) {

                EEG_S2_On = true;
            }
        }
    }//GEN-LAST:event_EEG_S2ActionPerformed

    private void EEG_S3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EEG_S3ActionPerformed
        if (EEGSetOn) {
            if (EEG_S3.isSelected()) {

                EEG_S3_On = true;
            }
        }
    }//GEN-LAST:event_EEG_S3ActionPerformed

    private void EEG_S4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EEG_S4ActionPerformed
        if (EEGSetOn) {
            if (EEG_S4.isSelected()) {

                EEG_S4_On = true;
            }
        }
    }//GEN-LAST:event_EEG_S4ActionPerformed

    private void ECG_S1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ECG_S1ActionPerformed
        if (ECGSetOn) {
            if (ECG_S1.isSelected()) {
                ECG_S1_On = true;
            }
        }
    }//GEN-LAST:event_ECG_S1ActionPerformed

    private void ECG_S2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ECG_S2ActionPerformed
        if (ECGSetOn) {
            if (ECG_S2.isSelected()) {
                ECG_S2_On = true;
            }
        }
    }//GEN-LAST:event_ECG_S2ActionPerformed

    private void ECG_S3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ECG_S3ActionPerformed
        if (ECGSetOn) {
            if (ECG_S3.isSelected()) {
                ECG_S3_On = true;
            }
        }
    }//GEN-LAST:event_ECG_S3ActionPerformed

    private void ECG_S4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ECG_S4ActionPerformed
        if (ECGSetOn) {
            if (ECG_S4.isSelected()) {
                ECG_S4_On = true;
            }
        }
    }//GEN-LAST:event_ECG_S4ActionPerformed

    private void GSR_S1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GSR_S1ActionPerformed
        if (GSRSetOn) {
            if (GSR_S1.isSelected()) {
                GSR_S1_On = true;
            }
        }
    }//GEN-LAST:event_GSR_S1ActionPerformed

    private void GSR_S2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GSR_S2ActionPerformed
        if (GSRSetOn) {
            if (GSR_S2.isSelected()) {
                GSR_S2_On = true;
            }
        }
    }//GEN-LAST:event_GSR_S2ActionPerformed

    private void GSR_S3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GSR_S3ActionPerformed
        if (GSRSetOn) {
            if (GSR_S3.isSelected()) {
                GSR_S3_On = true;
            }
        }
    }//GEN-LAST:event_GSR_S3ActionPerformed

    private void GSR_S4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GSR_S4ActionPerformed
        if (GSRSetOn) {
            if (GSR_S4.isSelected()) {
                GSR_S4_On = true;
            }
        }
    }//GEN-LAST:event_GSR_S4ActionPerformed

    private void EMG_S1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EMG_S1ActionPerformed
        if (EMGSetOn) {
            if (EMG_S1.isSelected()) {
                EMG_S1_On = true;
            }
        }
    }//GEN-LAST:event_EMG_S1ActionPerformed

    private void EMG_S2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EMG_S2ActionPerformed
        if (EMGSetOn) {
            if (EMG_S2.isSelected()) {
                EMG_S2_On = true;
            }
        }
    }//GEN-LAST:event_EMG_S2ActionPerformed

    private void EMG_S3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EMG_S3ActionPerformed
        if (EMGSetOn) {
            if (EMG_S3.isSelected()) {
                EMG_S3_On = true;
            }
        }
    }//GEN-LAST:event_EMG_S3ActionPerformed

    private void EMG_S4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EMG_S4ActionPerformed
        if (EMGSetOn) {
            if (EMG_S4.isSelected()) {
                EMG_S4_On = true;
            }
        }
    }//GEN-LAST:event_EMG_S4ActionPerformed

    private void jButtonEEGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEEGActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonEEGActionPerformed

    private void jToggleButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonExitActionPerformed
        if (jToggleButtonExit.getText().equals("Exit") && jToggleButtonExit.isEnabled()) {
            System.exit(0);
    }//GEN-LAST:event_jToggleButtonExitActionPerformed
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainWindow().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ECG_S1;
    private javax.swing.JCheckBox ECG_S2;
    private javax.swing.JCheckBox ECG_S3;
    private javax.swing.JCheckBox ECG_S4;
    private javax.swing.JCheckBox EEG_S1;
    private javax.swing.JCheckBox EEG_S2;
    private javax.swing.JCheckBox EEG_S3;
    private javax.swing.JCheckBox EEG_S4;
    private javax.swing.JCheckBox EMG_S1;
    private javax.swing.JCheckBox EMG_S2;
    private javax.swing.JCheckBox EMG_S3;
    private javax.swing.JCheckBox EMG_S4;
    private javax.swing.JCheckBox GSR_S1;
    private javax.swing.JCheckBox GSR_S2;
    private javax.swing.JCheckBox GSR_S3;
    private javax.swing.JCheckBox GSR_S4;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonECG;
    private javax.swing.JButton jButtonEEG;
    private javax.swing.JButton jButtonEMG;
    private javax.swing.JButton jButtonEyeTracking;
    private javax.swing.JButton jButtonEyeTrackingData;
    private javax.swing.JButton jButtonGSR;
    private javax.swing.JButton jButtonUserVideo;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelEyeTracking;
    private javax.swing.JLabel jLabelUserVideo;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanelECG;
    private javax.swing.JPanel jPanelEEG;
    private javax.swing.JPanel jPanelEMG;
    private javax.swing.JPanel jPanelEyeTracking;
    private javax.swing.JPanel jPanelGSR;
    private javax.swing.JPanel jPanelMessages;
    private javax.swing.JPanel jPanelUserVideo;
    private javax.swing.JRadioButton jRadioButtonBrowseComputer;
    private javax.swing.JRadioButton jRadioButtonLive;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaDisplayMessages;
    private javax.swing.JToggleButton jToggleButtonExit;
    private javax.swing.JToggleButton jToggleButtonStart;
    private javax.swing.JToggleButton jToggleButtonStop;
    private javax.swing.JSlider slider;
    // End of variables declaration//GEN-END:variables

    private Canvas canvas;
    private Map<javax.swing.JPanel, String> fileToOpen;
    private boolean browseComputer;
    private Thread graphThreads[];
    private int graphCount;
    private VideoPlotter videoPlotters[];
    private int videoPlotterCount;
    private SharedData sharedData;
    private boolean EEGSetOn = false;
    private boolean ECGSetOn = false;
    private boolean EMGSetOn = false;
    private boolean GSRSetOn = false;
    public boolean EEG_S1_On = false;
    public boolean EEG_S2_On = false;
    public boolean EEG_S3_On = false;
    public boolean EEG_S4_On = false;
    public boolean ECG_S1_On = false;
    public boolean ECG_S2_On = false;
    public boolean ECG_S3_On = false;
    public boolean ECG_S4_On = false;
    public boolean EMG_S1_On = false;
    public boolean EMG_S2_On = false;
    public boolean EMG_S3_On = false;
    public boolean EMG_S4_On = false;
    public boolean GSR_S1_On = false;
    public boolean GSR_S2_On = false;
    public boolean GSR_S3_On = false;
    public boolean GSR_S4_On = false;
}
